# Generated by Django 3.2.16 on 2023-03-10 10:53

from django.db import migrations, models
import django.utils.timezone
import django.db.models.deletion

from django.core.management.color import no_style
from django.db import connection


def _reset_cursor_flowbit(apps):
    '''
    Flowbit ID were set manually => cursor ID is not correct
    So we need to reset this cursor

    https://stackoverflow.com/questions/43663588/executing-djangos-sqlsequencereset-code-from-within-python/50275895#50275895
    '''
    Flowbit = apps.get_model('rules', 'Flowbit')
    sequence_sql = connection.ops.sequence_reset_sql(no_style(), [Flowbit])
    with connection.cursor() as cursor:
        for sql in sequence_sql:
            cursor.execute(sql)


flowbits_set = []
flowbits_isset = []


def _rule_at_version(apps):
    Rule = apps.get_model('rules', 'Rule')
    RuleAtVersion = apps.get_model('rules', 'RuleAtVersion')

    # rules at version
    rules_content = []
    for rule in Rule.objects.all():
        rules_content.append(
            RuleAtVersion(
                rev=rule.rev,
                version=0,
                content=rule.content,
                rule=rule,
                state=rule.state,
                commented_in_source=not rule.state_in_source,
                imported_date=rule.imported_date,
                updated_date=rule.updated_date,
                created=rule.created,
                updated=rule.updated
            )
        )

        if len(rules_content) > 10000:
            RuleAtVersion.objects.bulk_create(rules_content)
            rules_content.clear()

    if len(rules_content) > 0:
        RuleAtVersion.objects.bulk_create(rules_content)


def _flowbits(apps):
    Flowbit = apps.get_model('rules', 'Flowbit')
    Source = apps.get_model('rules', 'Source')

    # Many to many fields / Flowbits <-> RuleAtVersion
    for flowbit in Flowbit.objects.all():
        for rule in flowbit.set.all():
            flowbits_set.append((rule.ruleatversion_set.first(), flowbit))

        for rule in flowbit.isset.all():
            flowbits_isset.append((rule.ruleatversion_set.first(), flowbit))

    Source.objects.update(version=0)


def _suppressed(apps):
    Ruleset = apps.get_model('rules', 'Ruleset')
    Rule = apps.get_model('rules', 'Rule')
    RuleTransformation = apps.get_model('rules', 'RuleTransformation')
    SuppressedRuleAtVersion = apps.get_model('rules', 'SuppressedRuleAtVersion')

    suppressed = []
    for ruleset in Ruleset.objects.all():
        rules = Rule.objects.filter(
            ruletransformation__ruleset=ruleset,
            ruletransformation__key='suppressed',
            ruletransformation__value='suppressed'
        )

        for rule in rules:
            for rav in rule.ruleatversion_set.all():
                suppressed.append(
                        SuppressedRuleAtVersion(
                            ruleset=ruleset,
                            rule_at_version=rav))

        if len(suppressed):
            SuppressedRuleAtVersion.bulk_create(suppressed)
            RuleTransformation.objects.filter(key='suppressed').delete()


def migration(apps, _):
    _rule_at_version(apps)
    _flowbits(apps)
    _suppressed(apps)


def migrate_2(apps, _):
    FlowbitSetRuleAtVersion = apps.get_model('rules', 'FlowbitSetRuleAtVersion')
    FlowbitISSetRuleAtVersion = apps.get_model('rules', 'FlowbitISSetRuleAtVersion')

    if len(flowbits_set):
        bulk = []
        for rav, flowbit in flowbits_set:
            bulk.append(FlowbitSetRuleAtVersion(rule_at_version_id=rav.id, flowbit_id=flowbit.id))

        if len(bulk):
            FlowbitSetRuleAtVersion.objects.bulk_create(bulk)

    if len(flowbits_isset):
        bulk = []
        for rav, flowbit in flowbits_isset:
            bulk.append(FlowbitISSetRuleAtVersion(rule_at_version_id=rav.id, flowbit_id=flowbit.id))

        if len(bulk):
            FlowbitISSetRuleAtVersion.objects.bulk_create(bulk)

    _reset_cursor_flowbit(apps)


class Migration(migrations.Migration):

    dependencies = [
        ('rules', '0099_alter_source_datatype'),
    ]

    operations = [
        migrations.CreateModel(
            name='RuleAtVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rev', models.IntegerField(default=0)),
                ('version', models.IntegerField(default=0)),
                ('content', models.CharField(max_length=10000)),
                ('state', models.BooleanField(default=True)),
                ('commented_in_source', models.BooleanField(default=False)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules.rule')),

                ('imported_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateField(blank=True, null=True)),
                ('updated', models.DateField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('rule', 'version')},
            },
        ),
        migrations.CreateModel(
            name='SuppressedRuleAtVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruleset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules.Ruleset')),
                ('rule_at_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules.RuleAtVersion'))
            ],
            options={
                'unique_together': {('ruleset', 'rule_at_version')},
            },
        ),
        migrations.RunPython(migration),

        migrations.RemoveField(
            model_name='rule',
            name='content',
        ),
        migrations.RemoveField(
            model_name='rule',
            name='rev',
        ),
        migrations.RemoveField(
            model_name='rule',
            name='state',
        ),
        migrations.RemoveField(
            model_name='rule',
            name='state_in_source',
        ),
        migrations.RemoveField(
            model_name='rule',
            name='imported_date',
        ),
        migrations.RemoveField(
            model_name='rule',
            name='updated_date',
        ),

        migrations.CreateModel(
            name='FlowbitSetRuleAtVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flowbit', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.flowbit')),
                ('rule_at_version', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.ruleatversion', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlowbitISSetRuleAtVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flowbit', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.flowbit')),
                ('rule_at_version', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.ruleatversion', null=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='flowbit',
            name='isset'
        ),
        migrations.RemoveField(
            model_name='flowbit',
            name='set'
        ),
        migrations.AddField(
            model_name='flowbit',
            name='isset',
            field=models.ManyToManyField(related_name='checker', through='rules.FlowbitISSetRuleAtVersion', to='rules.RuleAtVersion'),
        ),
        migrations.AddField(
            model_name='flowbit',
            name='set',
            field=models.ManyToManyField(related_name='setter', through='rules.FlowbitSetRuleAtVersion', to='rules.RuleAtVersion'),
        ),
        migrations.RunPython(migrate_2),

        migrations.AlterField(
            model_name='flowbitsetruleatversion',
            name='rule_at_version',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.ruleatversion')
        ),

        migrations.AlterField(
            model_name='flowbitissetruleatversion',
            name='rule_at_version',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, to='rules.ruleatversion')
        ),
    ]
